#import "std.poulet"

n0 : nat[] := nat[].Z
n1 : nat[] := nat[].S(n0)
n2 : nat[] := nat[].S(n1)
n3 : nat[] := nat[].S(n2)
n4 : nat[] := nat[].S(n3)
n5 : nat[] := nat[].S(n4)
n6 : nat[] := nat[].S(n5)
n7 : nat[] := nat[].S(n6)
n8 : nat[] := nat[].S(n7)
n9 : nat[] := nat[].S(n8)

#assert pred(n0) ~ n0
#assert pred(n1) ~ n0
#assert pred(n2) ~ n1
#assert pred(n3) ~ n2
#assert pred(n4) ~ n3

#assert minus(n0, n0) ~ n0
#assert minus(n3, n1) ~ n2
#assert minus(n9, n3) ~ n6
#assert minus(n0, n1) ~ n0
#assert minus(n8, n9) ~ n0

#assert nat_eq(n0, n0) ~ bool[].true
#assert nat_eq(n0, n1) ~ bool[].false
#assert nat_eq(n0, n2) ~ bool[].false
#assert nat_eq(n0, n3) ~ bool[].false
#assert nat_eq(n0, n4) ~ bool[].false

#assert nat_eq(n1, n0) ~ bool[].false
#assert nat_eq(n1, n1) ~ bool[].true
#assert nat_eq(n1, n2) ~ bool[].false
#assert nat_eq(n1, n3) ~ bool[].false
#assert nat_eq(n1, n4) ~ bool[].false

#assert nat_eq(n2, n0) ~ bool[].false
#assert nat_eq(n2, n1) ~ bool[].false
#assert nat_eq(n2, n2) ~ bool[].true
#assert nat_eq(n2, n3) ~ bool[].false
#assert nat_eq(n2, n4) ~ bool[].false

#assert geq(n0, n0) ~ bool[].true
#assert geq(n0, n1) ~ bool[].false
#assert geq(n0, n2) ~ bool[].false
#assert geq(n0, n3) ~ bool[].false
#assert geq(n0, n4) ~ bool[].false

#assert geq(n1, n0) ~ bool[].true
#assert geq(n1, n1) ~ bool[].true
#assert geq(n1, n2) ~ bool[].false
#assert geq(n1, n3) ~ bool[].false
#assert geq(n1, n4) ~ bool[].false

#assert geq(n2, n0) ~ bool[].true
#assert geq(n2, n1) ~ bool[].true
#assert geq(n2, n2) ~ bool[].true
#assert geq(n2, n3) ~ bool[].false
#assert geq(n2, n4) ~ bool[].false

#assert div(n9, n2) ~ n4
#assert div(n8, n2) ~ n4
#assert div(n7, n2) ~ n3
#assert div(n9, n3) ~ n3
#assert div(n8, n3) ~ n2
#assert div(n0, n2) ~ n0
#assert div(n9, n0) ~ n9

#assert pr1(pair(nat[].Z, bool[].true)) ~ nat[].Z
#assert pr2(pair(nat[].Z, bool[].true)) ~ bool[].true