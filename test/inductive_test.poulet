int : Type1
zero : int

inductive {
    type and (p : Type1) (q : Type1) : {_ : p} {_ : q} Type1 {
        mk : {a : p} {b : q} ((and[p, q]) a) b
    }
}

inductive {
    type wrap : {_ : int} Type1 {
        mk : {a : int} (wrap[]) a
    }
}

#check (wrap[].mk) zero
