bool : Type1 := {X : Type1} {_ : X} {_ : X} X
true : bool := \X : Type1 -> \x : X -> \y : X -> x
false : bool := \X : Type1 -> \x : X -> \y : X -> y

inductive {
    type list (A : Type1) : Type1 {
        nil : list[A]
        cons : {_ : A} {_ : (list) A} list[A]
    }
}

is_empty : {A : Type1} {_ : list[A]} bool := \A : Type1 -> \l : list[A] -> match l as l in bool {
    nil => t,
    cons _ _ => f
}