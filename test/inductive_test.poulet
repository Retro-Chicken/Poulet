inductive {
    type list (A : Type1) : Type1 {
        nil : list[A]
        cons : {_ : A} {_ : list[A]} list[A]
    }
}

int : Type1
zero : int

bool : Type1
true : bool

inductive {
    type and (p : Type1) (q : Type1) : {_ : p} {_ : q} Type1 {
        mk : {_ : p} {_ : q} ((and[p, q]) p) q
    }
}

#check ((and[int, int]) zero) zero
